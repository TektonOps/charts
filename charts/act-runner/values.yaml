# Global values
global:
  # -- Override the name of the app.
  nameOverride: ""
  # -- Override the fully qualified app name.
  fullnameOverride: ""
  # -- Apply labels to all resources.
  commonLabels: {}
    # enviornment: production

image: 
  # -- Specify the image name to use (relative to `image.repository`).
  name: gitea/act_runner
  # -- Specify the image tag to use. ( nightly or nightly-dind-rootless )
  tag: nightly
  # -- Specify the image repository to use.
  repository: docker.io
  # -- Specify the
  # [pullPolicy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy).
  pullPolicy: Always
  # -- Specify the image pull secrets if pulling from private registry
  # [imagePullSecrets](https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod).
  pullSecrets: []
  #  - name: <REGISTRY_SECRET>

runner:
  # -- Set to true to use a StatefulSet instead of a Deployment
  useStatefulSet: false
  # -- valid options for statefulset `RollingUpdate`, `OnDelete` / Deployment: `RollingUpdate`, `Recreate`
  updateStrategy:
    type: Recreate
  # -- Docker in Docker with root user
  # -- @default `nil`
  dockerDind: 
  # -- enable docker dind
    enabled: ture
  # -- docker image repository
    image: "docker:23.0.6-dind"

  # -- Gitea instance URL 
  instanceURL: "http://gitea-http.apps.svc.cluster.local:3000"
  # -- Runner registration token
  runnerToken:
    # -- Set registration token value, if existing secret is specified this value is not used.
    value: < token here >
    # -- Specify an existing secret containing runner token with key (token: value)
    existingSecret: ""


  # -- Specify runner's custom configuration
  # @default -- `nil`
  config:
    # -- Enables configuration for deployment
    enabled: false
    # -- Your custom config block
    data: |
      log:
        level: info
      runner:
        labels: []

persistence:
  # -- If **true**, create and use PersistentVolumeClaims.
  enabled: true
  # -- Name of an existing PersistentVolumeClaim to use.
  existingClaim: ""
  # -- Specify the storageClassName for PersistentVolumeClaims.
  storageClassName: ""
  # -- Specify the accessModes for PersistentVolumeClaims.
  accessModes: ReadWriteOnce
  # -- Specify the size of PersistentVolumeClaims.
  size: 1Gi
  # -- Path inside the container where volume will be mounted
  mountPath: "/data"
  # -- Specify the selectors for PersistentVolumeClaims.
  selector: {}

# -- Define environment variables.
env: 
 - name: DOCKER_HOST
   value: tcp://localhost:2376
 - name: DOCKER_CERT_PATH
   value: /certs/client
 - name: DOCKER_TLS_VERIFY
   value: "1"
#  - name: GITEA_RUNNER_LABELS
#    value: ""


# -- Define environment variables from existing ConfigMap or Secret data.
envFrom: []
#  - configMapRef:
#      name: <CONFIGMAP_NAME>
#  - secretRef:
#     name: <SECRET_NAME>

# -- only one replica as runner doesn't support clustering. default set to `1`
replicas: "1"


# -- Set annotations on Pods.
podAnnotations: {}

# -- Set labels on Pods.
podLabels: {}

# podPriorityClassName -- Set the
# [priorityClassName](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass).
podPriorityClassName: ""

# -- Enable the hostNetwork option on Pods.
podHostNetwork: false

# -- Allows you to overwrite the default. Only applied when using rootless container
# [PodSecurityContext](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).
podSecurityContext:
  fsGroup: 1000

# -- Specify securityContext for Containers.
securityContext:
  privileged: true

# -- Override default image command.
command: []

# -- Override default image arguments.
args: []


# -- Specify resource requests and limits.
resources: {}
  # requests:
  #   cpu: 200m
  #   memory: 256Mi
  # limits:
  #   cpu: 200m
  #   memory: 256Mi

# -- Specify lifecycle hooks for Containers.
lifecycle: {}
  # preStop:
  #   exec:
  #     command:
  #     - /bin/sleep
  #     - "10"

# -- Override terminationGracePeriodSeconds.
terminationGracePeriodSeconds: 10

# -- Configure
# [nodeSelector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector).
nodeSelector: {}

# -- Configure
# [taints and tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
tolerations: []

# -- Configure
# [affinity and anti-affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity).
affinity: {}

# -- Configure
# [topology spread constraints](https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/).
topologySpreadConstraints: []


# -- Specify additional Volumes to use.
extraVolumes: []

# -- Specify Additional VolumeMounts to use.
extraVolumeMounts: []

# -- Specify initContainers to be added.
initContainers: []

# -- Specify extra Containers to be added.
extraContainers: []


# -- Specify dns policy
# [dnsPolicy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy).
dnsPolicy: ClusterFirst

# -- Specify a custom dns config
# [dnsConfig](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config).
dnsConfig: {}
#  nameservers:
#    - 1.2.3.4
#  searches:
#   - ns1.svc.cluster-domain.example
#   - my.dns.search.suffix
#  options:
#    - name: ndots
#      value: "2"
#    - name: edns0

# -- Specify the livenessProbe
# [configuration](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes).
livenessProbe: {}

# -- Specify the readinessProbe
# [configuration](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes).
readinessProbe: {}
